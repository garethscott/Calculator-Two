{"version":3,"sources":["components/Button.js","App.js","components/AddButton.js","components/ClearButton.js","components/OnButton.js","components/Input.js","components/EqualsButton.js","serviceWorker.js","index.js"],"names":["Button","props","StyledButton","onClick","handleAddToInput","children","styled","div","App","useState","value","input","setInput","val","handleEquals","eval","StyledBody","StyledWrapper","StyledCalcTop","StyledCalcBottom","StyledBtnCont","StyledTopHozRow","handleClear","StyledBottomCont","StyledVertRow","AddButton","StyledAddButton","ClearButton","StyledClearButton","OnButton","StyledOnButton","Input","StyledOuterBox","StyledInnerBox","EqualsButton","StyledEqualsButton","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.138d938b.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst Button = (props) => {\n    return (\n        <StyledButton onClick={() => props.handleAddToInput(props.children)}>\n            {props.children}\n        </StyledButton>\n    )\n}\n\nexport default Button;\n\nconst StyledButton = styled.div`\n   width: 56px;\n   height: 40px;\n   background: lightgrey;\n   border-radius: 7px;\n   display: flex;\n   justify-content: center;\n   font-family: 'Baloo Tammudu 2';\n   font-size: 25px;\n   font-weight: 600;\n   color: rgb(91, 91, 91);\n`;\n\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport Button from './components/Button';\nimport AddButton from './components/AddButton';\nimport ClearButton from './components/ClearButton';\nimport OnButton from './components/OnButton';\nimport Input from './components/Input';\nimport EqualsButton from './components/EqualsButton'\nimport './App.css';\n\nfunction App() {\n\n  const [input, setInput] = useState({\n    value: '',\n  })\n\n  const handleAddToInput = (val) => {\n    setInput({\n      value: input.value + val,\n    })\n  }\n\n  const handleEquals = () => {\n    setInput({\n      value: eval(input.value)\n    })\n  }\n\n  return (\n    <StyledBody>\n      <StyledWrapper>\n        <StyledCalcTop>\n          <Input input={input.value}></Input>\n        </StyledCalcTop>\n        <StyledCalcBottom>\n          <StyledBtnCont>\n            <StyledTopHozRow>\n              <OnButton>On</OnButton>\n              <ClearButton handleClear={() => setInput({ value: '' })}>Clear</ClearButton>\n              <Button handleAddToInput={handleAddToInput}>/</Button>\n            </StyledTopHozRow>\n            <StyledBottomCont>\n              <StyledVertRow>\n                <Button handleAddToInput={handleAddToInput}>7</Button>\n                <Button handleAddToInput={handleAddToInput}>4</Button>\n                <Button handleAddToInput={handleAddToInput}>1</Button>\n                <Button handleAddToInput={handleAddToInput}>.</Button>\n              </StyledVertRow>\n              <StyledVertRow>\n                <Button handleAddToInput={handleAddToInput}>8</Button>\n                <Button handleAddToInput={handleAddToInput}>5</Button>\n                <Button handleAddToInput={handleAddToInput}>2</Button>\n                <Button handleAddToInput={handleAddToInput}>0</Button>\n              </StyledVertRow>\n              <StyledVertRow>\n                <Button handleAddToInput={handleAddToInput}>9</Button>\n                <Button handleAddToInput={handleAddToInput}>6</Button>\n                <Button handleAddToInput={handleAddToInput}>3</Button>\n                <EqualsButton handleEquals={handleEquals}>=</EqualsButton>\n              </StyledVertRow>\n              <StyledVertRow>\n                <Button handleAddToInput={handleAddToInput}>*</Button>\n                <Button handleAddToInput={handleAddToInput}>-</Button>\n                <AddButton handleAddToInput={handleAddToInput}>+</AddButton>\n              </StyledVertRow>\n            </StyledBottomCont>\n          </StyledBtnCont>\n        </StyledCalcBottom>\n      </StyledWrapper>\n    </StyledBody >\n  );\n}\n\nexport default App;\n\nconst StyledBody = styled.div`\n   background-color: lightblue;\n   width: 100%;\n   height: 100vh;\n   display: flex;\n   justify-content: center;\n   align-items: center;\n`;\nconst StyledWrapper = styled.div`\n   width: 290px;\n   height: 375px;\n   border-radius: 15px;\n`;\nconst StyledCalcTop = styled.div`\n   width: 100%;\n   height: 27%;\n   background-color: rgb(29, 175, 235);\n   border-radius: 15px 15px 0px 0px;\n   display: flex;\n   justify-content: center;\n   align-items: center;\n`;\nconst StyledCalcBottom = styled.div`\n   width: 100%;\n   height: 73%;\n   background-color: rgb(255, 255, 255);\n   border-radius: 0px 0px 15px 15px;\n   display: flex;\n   justify-content: center;\n   align-items: center;\n`;\nconst StyledBtnCont = styled.div`\n   height: 84%;\n   width: 85%;\n`;\nconst StyledTopHozRow = styled.div`\n   height: 40px;\n   width: 100%;\n   display: flex;\n   justify-content: space-between;\n   margin-bottom: 7px;\n`;\nconst StyledBottomCont = styled.div`\n   height: 80%;\n   width: 100%;\n   display: flex;\n   justify-content: space-between;\n`;\nconst StyledVertRow = styled.div`\n   height: 100%;\n   width: 56px;\n   display: flex;\n   flex-direction: column;\n   justify-content: space-between;\n`;\n\n\n\n\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst AddButton = (props) => {\n    return (\n        <StyledAddButton onClick={() => props.handleAddToInput(props.children)}>\n            {props.children}\n        </StyledAddButton>\n    )\n}\n\nexport default AddButton\n\nconst StyledAddButton = styled.div`\n    height: 78px;\n    width: 56px;\n    background-color: rgb(29, 175, 235);\n    border-radius: 7px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-family: 'Baloo Tammudu 2';\n    font-size: 35px;\n    font-weight: 600;\n    color: rgb(255, 255, 255);\n    padding-top: 10px;\n`;","import React from 'react';\nimport styled from 'styled-components';\n\nconst ClearButton = (props) => {\n    return (\n        <StyledClearButton onClick={props.handleClear}>\n            {props.children}\n        </StyledClearButton>\n    )\n}\n\nexport default ClearButton;\n\nconst StyledClearButton = styled.div`\n   height: 40px;\n   width: 120px;\n   background-color: rgb(91, 91, 91);\n   border-radius: 7px;\n   display: flex;\n   justify-content: center;\n   font-family: 'Baloo Tammudu 2';\n   font-size: 25px;\n   font-weight: 600;\n   color: rgb(255, 255, 255);\n`;","import React from 'react';\nimport styled from 'styled-components';\n\nconst OnButton = (props) => {\n    return (\n        <StyledOnButton>\n            {props.children}\n        </StyledOnButton>\n    )\n}\n\nexport default OnButton;\n\nconst StyledOnButton = styled.div`\n    height: 40px;\n    width: 56px;\n    border-radius: 7px;\n    background-color: rgb(253, 77, 91);\n    display: flex;\n    justify-content: center;\n    font-family: 'Baloo Tammudu 2';\n    font-size: 25px;\n    font-weight: 600;\n    color: white;\n`;","import React from 'react';\nimport styled from 'styled-components';\n\nconst Input = (props) => {\n    return (\n        <StyledOuterBox>\n            <StyledInnerBox>\n                {props.input}\n            </StyledInnerBox>\n        </StyledOuterBox>\n    )\n}\n\nexport default Input;\n\nconst StyledOuterBox = styled.div`\n   width: 85%;\n   height: 60px;\n   background-color: rgb(91, 91, 91);\n   border-radius: 7px;\n   display: flex;\n   justify-content: center;\n   align-items: center;\n`;\nconst StyledInnerBox = styled.div`\n   width: 84%;\n   height: 45px;\n   background-color: lightgrey;\n   border-radius: 7px;\n   display: flex;\n   justify-content: flex-end;\n   padding-right: 10px;\n   font-family: 'Baloo Tammudu 2';\n   font-size: 25px;\n   font-weight: 600;\n   color: rgb(91, 91, 91);\n   letter-spacing: 0.04em;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst EqualsButton = (props) => {\n    return (\n        <StyledEqualsButton onClick={props.handleEquals}>\n            {props.children}\n        </StyledEqualsButton>\n    )\n}\n\nexport default EqualsButton;\n\nconst StyledEqualsButton = styled.div`\nwidth: 56px;\nheight: 40px;\nbackground: lightgrey;\nborder-radius: 7px;\ndisplay: flex;\njustify-content: center;\nfont-family: 'Baloo Tammudu 2';\nfont-size: 25px;\nfont-weight: 600;\ncolor: rgb(91, 91, 91);\n`;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}